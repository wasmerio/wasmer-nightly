name: Nightly build

env:
  RUST_BACKTRACE: 1

on:
  pull_request:
  schedule:
    - cron: '59 23 * * *'
  workflow_dispatch:

jobs:
  setup:
    name: Set up
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.setup.outputs.VERSION }}
    steps:
      - name: Set up env vars
        id: setup
        shell: bash
        run: |
          VERSION="wasmer-nightly-$(date +'%Y-%m-%d' -d 'yesterday')"
          echo ::set-output name=VERSION::${VERSION}
          echo $VERSION
      - name: Double checking
        run: |
          echo ${{ steps.setup.outputs.VERSION }}
  build:
    name: Build on ${{ matrix.build }}
    runs-on: ${{ matrix.os }}
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        build: [linux, macos, windows, linux-aarch64]
        include:
          - build: linux
            os: ubuntu-18.04
            rust: 1.49
            llvm_url: 'https://github.com/wasmerio/llvm-custom-builds/releases/download/11.x/linux-amd64.tar.gz'
            artifact_name: 'wasmer-linux-amd64'
          - build: macos
            os: macos-latest
            rust: 1.49
            llvm_url: 'https://github.com/wasmerio/llvm-custom-builds/releases/download/11.x/darwin-amd64.tar.gz'
            artifact_name: 'wasmer-macos-amd64'
          - build: windows
            os: windows-latest
            rust: 1.49
            artifact_name: 'wasmer-windows-amd64'
          - build: linux-aarch64
            os: [self-hosted, Linux, ARM64]
            rust: 1.49
            llvm_url: 'https://github.com/wasmerio/llvm-custom-builds/releases/download/11.x/linux-aarch64.tar.gz'
            artifact_name: 'wasmer-linux-aarch64'
    env:
      CARGO_SCCACHE_VERSION: 0.2.13
      SCCACHE_AZURE_BLOB_CONTAINER: wasmerstoragesccacheblob
      SCCACHE_AZURE_CONNECTION_STRING: ${{ secrets.SCCACHE_AZURE_CONNECTION_STRING }}
    steps:
      - uses: actions/checkout@v2
        with:
          repository: 'wasmerio/wasmer'
          ref: 'master'
      - name: Set up libstdc++ on Linux
        if: matrix.build == 'linux-x64'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --allow-downgrades libstdc++6=8.4.0-1ubuntu1~18.04
          sudo apt-get install --reinstall g++-8
      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          override: true
      #- name: Cache
      #  uses: actions/cache@master
      #  with:
      #    # Note: crates from the git repo always get rebuilt
      #    # so we cache only those subdirectories of target/{debug|release} that
      #    # contain the build output for crates that come from the registry.
      #    path: |-
      #      .cargo_home
      #      target/*/.*
      #      target/*/build
      #      target/*/deps
      #    key: ${{ matrix.os }}-${{ matrix.rust }}-${{ hashFiles('Cargo.lock') }}
      #    restore-keys: |
      #      ${{ matrix.os }}-${{ matrix.rust }}-${{ hashFiles('Cargo.lock') }}
      # # Install sccache
      # - uses: actions/cache@master
      #   with:
      #     path: ${{ runner.tool_cache }}/cargo-sccache
      #     key: cargo-sccache-bin-${{ env.CARGO_SCCACHE_VERSION }}
      # - name: Install sccache
      #   run: |
      #     echo "${{ runner.tool_cache }}/cargo-sccache/bin" >> $GITHUB_PATH
      #     cargo install sccache --version ${{ env.CARGO_SCCACHE_VERSION }} --root ${{ runner.tool_cache }}/cargo-sccache
      # - name: Start sccache
      #   run: |
      #     ${{ runner.tool_cache }}/cargo-sccache/bin/sccache --start-server
      #     ${{ runner.tool_cache }}/cargo-sccache/bin/sscache -s
      #     echo "RUSTC_WRAPPER=${{ runner.tool_cache }}/cargo-sccache/bin/sccache" >> $GITHUB_ENV
      - name: Install LLVM
        if: matrix.llvm_url
        run: |
          curl --proto '=https' --tlsv1.2 -sSf ${{ matrix.llvm_url }} -L -o llvm.tar.xz
          mkdir -p ${{ env.LLVM_DIR }}
          tar xf llvm.tar.xz --strip-components=1 -C ${{ env.LLVM_DIR }}
          echo "${{ env.LLVM_DIR }}/bin" >> $GITHUB_PATH
          echo "LLVM_SYS_110_PREFIX=${{ env.LLVM_DIR }}" >> $GITHUB_ENV
        env:
          LLVM_DIR: ${{ github.workspace }}/llvm-11
      - name: Set up dependencies for Mac OS
        if: matrix.os == 'macos-latest'
        run: |
          brew install automake
          # using gnu-tar is a workaround for https://github.com/actions/cache/issues/403
          brew install gnu-tar
          echo PATH="/usr/local/opt/gnu-tar/libexec/gnubin:$PATH" >> $GITHUB_ENV
      - name: Build C API
        run: |
          make build-capi
      - name: Build Wasmer binary
        run: |
          make build-wasmer
      - name: Build Wapm binary
        run: |
          make build-wapm
      - name: Install Nightly Rust for Headless
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 'nightly-2020-12-22'
          target: ${{ matrix.target }}
          override: true
          components: "rust-src"
      - name: Build Minimal Wasmer Headless
        run: |
          cargo install xargo
          echo "" >> Cargo.toml
          echo "[profile.release]" >> Cargo.toml
          echo "opt-level = 'z'" >> Cargo.toml
          echo "debug = false" >> Cargo.toml
          echo "debug-assertions = false" >> Cargo.toml
          echo "overflow-checks = false" >> Cargo.toml
          echo "lto = true" >> Cargo.toml
          echo "panic = 'abort'" >> Cargo.toml
          echo "incremental = false" >> Cargo.toml
          echo "codegen-units = 1" >> Cargo.toml
          echo "rpath = false" >> Cargo.toml
          make build-wasmer-headless-minimal
      - name: Dist
        run: |
          make distribution
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.artifact_name }}
          path: dist
          if-no-files-found: error
      - name: Post to Slack on failure
        if: failure() && (github.event == 'schedule' || github.ref == 'refs/heads/master')
        run: |
          ACTIONS_URL=$(printf "https://github.com/%s/actions/runs/%s" $GITHUB_REPOSITORY $GITHUB_RUN_ID)
          MESSAGE_TEXT=$(printf '{"text":":fire: Build failed :fire:. %s"}' $ACTIONS_URL)
          curl -X POST -H 'Content-type: application/json' --data "$MESSAGE_TEXT" ${{ secrets.SLACK_WEBHOOK_URL }}

  build-docker:
    name: Build on ${{ matrix.build }}
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        include:
          - build: linux-musl-x64
            image: alpine:latest
            rust: 1.49
            artifact_name: 'wasmer-linux-musl-amd64'
    steps:
      - uses: actions/checkout@v2
        with:
          repository: 'wasmerio/wasmer'
          ref: 'master'
      - uses: addnab/docker-run-action@v1
        with:
          image: ${{ matrix.image }}
          options: -v ${{ github.workspace }}:/work
          run: |
            set -e

            # Set up tools
            apk add musl-dev curl make libtool libffi-dev gcc automake autoconf git

            # Install Rust ${{ matrix.rust }}
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > rustup.sh
            sh ./rustup.sh -y
            source ~/.cargo/env
            rm ./rustup.sh

            # Set up Rust
            rustup toolchain install ${{ matrix.rust }}
            rustup default ${{ matrix.rust }}

            # Change working directory
            cd /work

            # Build C API
            make build-capi

            # Build Wasmer binary
            make build-wasmer

            # Build Wapm binary
            make build-wapm

            # Dist
            make distribution
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.artifact_name }}
          path: dist
          if-no-files-found: error
          retention-days: 1

  release:
    needs: [setup, build, build-docker]
    runs-on: ubuntu-latest
    if: github.event == 'schedule' || github.ref == 'refs/heads/master'
    steps:
      - name: Download The Artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.setup.outputs.VERSION }}
          release_name: Release ${{ needs.setup.outputs.VERSION }}
          draft: false
          prerelease: false
      - name: Upload Release Asset Windows
        id: upload-release-asset-windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: artifacts/wasmer-windows-amd64/WasmerInstaller.exe
          asset_name: WasmerInstaller.exe
          asset_content_type: application/vnd.microsoft.portable-executable
      - name: Upload Release Asset Linux amd64
        id: upload-release-asset-linux-amd64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/wasmer-linux-amd64/wasmer.tar.gz
          asset_name: wasmer-linux-amd64.tar.gz
          asset_content_type: application/gzip
      - name: Upload Release Asset Linux amd64 (musl)
        id: upload-release-asset-linux-musl-amd64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/wasmer-linux-musl-amd64/wasmer.tar.gz
          asset_name: wasmer-linux-musl-amd64.tar.gz
          asset_content_type: application/gzip
      - name: Upload Release Asset Mac
        id: upload-release-asset-mac
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/wasmer-macos-amd64/wasmer.tar.gz
          asset_name: wasmer-darwin-amd64.tar.gz
          asset_content_type: application/gzip
      - name: Upload Release Asset Linux aarch64
        id: upload-release-asset-linux-aarch64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/wasmer-linux-aarch64/wasmer.tar.gz
          asset_name: wasmer-linux-aarch64.tar.gz
          asset_content_type: application/gzip
      - name: Post to Slack on failure
        if: ${{ failure() }}
        run: |
          ACTIONS_URL=$(printf "https://github.com/%s/actions/runs/%s" $GITHUB_REPOSITORY $GITHUB_RUN_ID)
          MESSAGE_TEXT=$(printf '{"text":":fire: Publishing release failed :fire:. %s"}' $ACTIONS_URL)
          curl -X POST -H 'Content-type: application/json' --data "$MESSAGE_TEXT" ${{ secrets.SLACK_WEBHOOK_URL }}
